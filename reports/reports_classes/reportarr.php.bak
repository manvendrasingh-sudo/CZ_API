<?php
class Reportconfig extends DBconnection
{
    private $campArr = array();
    private $conn;
    private $reportquery;
    private $arr;
    private $queryval;
    private $headerval;
    private $campaign_id;
    private $fieldHeadings;
    private $table_name;
    private $reg_min_timestamp;
    private $reg_max_timestamp;
    private $campaignBetween;
    private $agent_id;
    private $campaign_id1;
    private $optCamp;
    private $optAgent;
    private $agentBetween;
    private $table_report_name    = "current_report";
    private $misscall_table_name  = "misscall_current_report";
    private $agentCall_table_name = "adminrw_ACD_ASA";
    private $baseURL;
    private $year;
    private $month;
    public function __construct($campaign_id, $table_name, $baseURL,$db)
    {
        $this->conn        = $db->mysqlConnection();
        $this->campaign_id = $campaign_id;
        $this->table_name = $table_name;
        $this->baseURL = $baseURL;
        $this->generateVoiceUrl();
    }


    public function dynamicDetailHeader($sep)
    {
        $this->reportquery = $this->conn->query("select header_name,field_name from module_fields group by  header_name,field_name order by traverse_header DESC");
        $arr               = array();
        while ($row = $this->reportquery->fetch_row()) {
            $arr[$row[0]] = $row[1];
        }
        return ($sep == "query") ? "select " . implode(",", array_keys($arr)) : implode(",", array_values($arr));
    }

    public function generateVoiceUrl()
    {
        $table = date('Y_m');
        if ($this->table_name !== "current_report") {
            $pattern = '/(\d{4})_(\d{2})/';
            if (preg_match($pattern, $this->table_name, $matches)) {
                $table = "{$matches[1]}_{$matches[2]}";
            }
        }
        $this->year  = explode("_", $table)[0];
        $this->month = explode("_", $table)[1];
    }

    public function reportArr()
    {
        return array(
            "agent_session_report"  => array(
                "query"             => 'select agent_name, agent_id,campaign_name, agent_state,call_start_date_time,call_end_date_time,HOUR_MINUTES(unix_timestamp(call_end_date_time)-unix_timestamp(call_start_date_time)) as login_time,logout_reason,HOUR_MINUTES(pauseDuration),HOUR_MINUTES(ready_time),HOUR_MINUTES(if(((unix_timestamp(call_end_date_time)-unix_timestamp(call_start_date_time))-(pauseDuration+ready_time))>0,((unix_timestamp(call_end_date_time)-unix_timestamp(call_start_date_time))-(pauseDuration+ready_time)),0)) as staff_time,HOUR_MINUTES(conf_duration),totalCall from agent_state_analysis_$this->table_name as a',
                
                "header"            => "Agent Name,Agent ID,Campaign Name,Agent State,Login Time,Logout Time,Total Time,Logout Reason,Aux Time,Ready Time,Staffed Time,Conference Time,Calls",
                
                "where"             => " where agent_state='LOGIN_N_LOGOUT'",
                
                "order by"          => "order by agent_name,call_start_date_time",
                "table_name"        => ""
            ),

            "abandon_calls"         => array(
                "query"             => "select cust_ph_no,CustUniqueId,q_enter_time,if(q_leave_time,(unix_timestamp(q_leave_time)-unix_timestamp(q_enter_time)),0) as qtime,did_num,skills,campaign_name,if(redial_flag=0,'NO','YES'),campaign_type",
                "header"            => "Customer Phone Number,Unique ID,Queue Enter Time,Queue Time(Secs),DID Number,Skills,Campaign Name,Redial Flag,Call Type",
                "where"             => " where call_status_disposition='abandon'",
                'table_name'        => ' from $this->table_name as a',
                'order by'          => ' order by q_enter_time'
            ),

            "agent_login_report"    => array(
                "query"             => "select ifnull(agent_name,'') as agent_name, agent_id, campaign_name, agent_state,call_start_date_time,ifnull(call_end_date_time,'') as call_end_date_time,HOUR_MINUTES(ready_time),if(break_type='','-',break_type)",
                "header"            => "Agent Name,Agent ID,Campaign Name,Agent State,Start Time,End Time,Ready Time,Break Reason",
                "where"             => " where 1 ",
                'table_name'        => ' from agent_state_analysis_$this->table_name as a',
                'order by'          => ' order by agent_name,call_start_date_time',
                'group by'          => ' 1'
            ),
            "campaign_call_summary"=> array(
                "query"             => array(
                    "INBOUND"       => "select campaign_name,did_num,sum(if(dialer_inserted_field = 0,1,0)) as calls_offered,sum(if((call_status_disposition='answered' or call_status_disposition='transfer') and dialer_inserted_field=0,1,0)) as calls_answd,sum(if((call_status_disposition='transfer') and dialer_inserted_field=0,1,0)) as Total_trnsfrd,format((sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))/sum(if(dialer_inserted_field = 0,1,0)) * 100),2) as percent_answd_offered, sum(if(call_status_disposition in ('abandon'),1,0)) as abandon,format((sum(if(call_status_disposition in ('abandon'),1,0))/sum(if(dialer_inserted_field = 0,1,0)) * 100),2) as per_abndn_off ,HOUR_MINUTES(sum(call_duration + wrapup_time)) as call_handling_time, ifnull(HOUR_MINUTES(sum(call_duration + wrapup_time)/sum(if(agent_id<>0,1,0))),'00:00:00') as avg_call_handling_time,HOUR_MINUTES(sum(if(dialer_type='PREVIEW',if(ringend_time!='0000-00-00 00:00:00',(if((call_duration-((unix_timestamp(ringend_time)-unix_timestamp(ringstart_time))+hold_time))>0,(call_duration-((unix_timestamp(ringend_time)-unix_timestamp(ringstart_time))+hold_time)),0)),(call_duration - hold_time)),(call_duration - hold_time)))) as actual_talk_time,HOUR_MINUTES(sum(call_duration)) as tot_talk_time,HOUR_MINUTES(sum(if(dialer_type='PREVIEW',if(ringend_time!='0000-00-00 00:00:00',if((unix_timestamp(ringend_time)-unix_timestamp(ringstart_time)) > 0,unix_timestamp(ringend_time)-unix_timestamp(ringstart_time),'0'),'0'),'0'))) as ring_time, ifnull(HOUR_MINUTES((sum(call_duration))/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'0') as avg_talk_time,sum(if(hold_time,1,0)) as hold_count, HOUR_MINUTES(sum(hold_time)) as hold_time,ifnull(HOUR_MINUTES(sum(hold_time)/sum(if(hold_time,1,0))),'0') as avg_hold_held, ifnull(HOUR_MINUTES(sum(hold_time)/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'0') as avg_hold_answd,sum(if((unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time)),1,0)) as calls_queued, HOUR_MINUTES(sum(if(q_leave_time,unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time),0))) as tot_queue_time,ifnull(HOUR_MINUTES(sum(if(q_leave_time,unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time),0))/sum(if((unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time)),1,0))),'00:00:00') as avg_queue_time,ifnull(HOUR_MINUTES(sum(if(q_leave_time,unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time),0))/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'00:00:00') as avg_speed_ans,MAX(unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time)) as max_delay,sum(if(wrapup_time,1,0)) as wrap_count, HOUR_MINUTES(sum(if(wrapup_time > 86400 or wrapup_time <0,0,wrapup_time))) as Total_Wrapup_Time,ifnull(HOUR_MINUTES(sum(if(wrapup_time > 86400 or wrapup_time <0,0,wrapup_time))/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'00:00:00') as avg_wrap_time,ifnull(HOUR_MINUTES(sum(wait_time)/sum(if(agent_id!=0,1,0))),'00:00:00') as wait_time",

                    "OUTBOUND"      => "select campaign_name,dialer_type,campaign_channel,count(campaign_id) as initiated_calls,sum(if(dialer_inserted_field=1,1,0)) as failed,ifnull(format((sum(if(dialer_inserted_field=1,1,0))/count(campaign_id) * 100),2),0) as percent_failed,sum(if(dialer_inserted_field = 0,1,0)) as calls_offered,format((sum(if(dialer_inserted_field = 0,1,0))/count(campaign_id) * 100),2) as percent_offered,sum(if(call_status_disposition in ('abandon'),1,0)) as abandon,format((sum(if(call_status_disposition in ('abandon'),1,0))/count(campaign_id) * 100),2) as per_abndn_init, format((sum(if(call_status_disposition in ('abandon'),1,0))/sum(if(dialer_inserted_field = 0,1,0)) * 100),2) as per_abndn_off, sum(if((call_status_disposition='answered' or call_status_disposition='transfer') and dialer_inserted_field=0,1,0)) as calls_answd,sum(if((call_status_disposition='transfer') and dialer_inserted_field=0,1,0)) as Total_trnsfrd,format((sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))/count(campaign_id) * 100),2) as percent_answd_initiated,format((sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))/sum(if(dialer_inserted_field = 0,1,0)) * 100),2) as percent_answd_offered,HOUR_MINUTES(sum(call_duration + wrapup_time)) as call_handling_time,ifnull(HOUR_MINUTES(sum(call_duration + wrapup_time)/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'00:00:00') as avg_call_handling_time,HOUR_MINUTES(sum(if(dialer_type='PREVIEW',if(ringend_time!='0000-00-00 00:00:00',(if((call_duration-((unix_timestamp(ringend_time)-unix_timestamp(ringstart_time))+hold_time))>0,(call_duration-((unix_timestamp(ringend_time)-unix_timestamp(ringstart_time))+hold_time)),0)),(call_duration - hold_time)),(call_duration - hold_time)))) as actual_talk_time,HOUR_MINUTES(sum(call_duration)) as tot_talk_time,HOUR_MINUTES(sum(if(dialer_type='PREVIEW',if(ringend_time!='0000-00-00 00:00:00',if((unix_timestamp(ringend_time)-unix_timestamp(ringstart_time)) > 0,unix_timestamp(ringend_time)-unix_timestamp(ringstart_time),'0'),'0'),'0'))) as ring_time,ifnull(HOUR_MINUTES((sum(call_duration))/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'0') as avg_talk_time,sum(if(hold_time,1,0)) as hold_count, HOUR_MINUTES(sum(hold_time)) as hold_time,ifnull(HOUR_MINUTES(sum(hold_time)/sum(if(hold_time,1,0))),'00:00:00') as avg_hold_held,ifnull(HOUR_MINUTES(sum(hold_time)/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'0') as avg_hold_answd,sum(if((unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time)),1,0)) as calls_queued,HOUR_MINUTES(sum(if(q_leave_time,unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time),0))) as tot_queue_time,ifnull(HOUR_MINUTES(sum(if(q_leave_time,unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time),0))/sum(if((unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time)),1,0))),'00:00:00') as avg_queue_time,ifnull(HOUR_MINUTES(sum(if(q_leave_time,unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time),0))/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'00:00:00') as avg_speed_ans,MAX(unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time)) as max_delay,sum(if(wrapup_time,1,0)) as wrap_count,HOUR_MINUTES(sum(if(wrapup_time > 86400 or wrapup_time <0,0,wrapup_time))) as Total_Wrapup_Time,ifnull(HOUR_MINUTES(sum(if(wrapup_time > 86400 or wrapup_time <0,0,wrapup_time))/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'00:00:00') as avg_wrap_time,ifnull(HOUR_MINUTES(sum(wait_time)/sum(if(agent_id!=0,1,0))),'00:00:00') as wait_time",

                    "ALL"           => "select campaign_name,dialer_type,campaign_type,campaign_channel,count(campaign_id) as initiated_calls,sum(if(dialer_inserted_field = 0,1,0)) as Total_offered,format((sum(if(dialer_inserted_field = 0,1,0))/count(campaign_id) * 100),2) as percent_offered,sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0)) as Total_answd,sum(if((call_status_disposition='transfer') and dialer_inserted_field=0,1,0)) as Total_trnsfrd,format((sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))/count(campaign_id) * 100),2) as percent_answd_initiated,format((sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))/sum(if(dialer_inserted_field = 0,1,0)) * 100),2) as percent_answd_offered,sum(if(agent_id!='' && cust_disposition <> 'None' && cust_disposition<>'',1,0)) as disp_set,sum(if(agent_id!='' && (cust_disposition = 'None' || cust_disposition=''),1,0)) as disp_not_set,sum(if(call_status_disposition in ('abandon'),1,0)) as abandon,format((sum(if(call_status_disposition in ('abandon'),1,0))/count(campaign_id) * 100),2) as per_abndn_init,format((sum(if(call_status_disposition in ('abandon'),1,0))/sum(if(dialer_inserted_field = 0,1,0)) * 100),2) as per_abndn_off ,sum(if(dialer_inserted_field=1,1,0)) as failed, HOUR_MINUTES(sum(call_duration + wrapup_time)) as tot_call_handling_time,HOUR_MINUTES(sum(if(dialer_type='PREVIEW',if(ringend_time!='0000-00-00 00:00:00',(if((call_duration-((unix_timestamp(ringend_time)-unix_timestamp(ringstart_time))+hold_time))>0,(call_duration-((unix_timestamp(ringend_time)-unix_timestamp(ringstart_time))+hold_time)),0)),(call_duration - hold_time)),(call_duration - hold_time)))) as actual_talk_time,HOUR_MINUTES(sum(call_duration)) as tot_talk_time,HOUR_MINUTES(sum(if(dialer_type='PREVIEW',if(ringend_time!='0000-00-00 00:00:00',if((unix_timestamp(ringend_time)-unix_timestamp(ringstart_time)) > 0,unix_timestamp(ringend_time)-unix_timestamp(ringstart_time),'0'),'0'),'0'))) as ring_time, ifnull(HOUR_MINUTES((sum(call_duration))/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'0') as avg_talk_time,ifnull(HOUR_MINUTES(sum(call_duration + wrapup_time)/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'00:00:00') as avg_call_handling_time,sum(if(hold_time,1,0)) as Total_Hold_Count, HOUR_MINUTES(sum(hold_time)) as total_hold_time,ifnull(HOUR_MINUTES(sum(hold_time)/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'0') as avg_hold_answd,ifnull(HOUR_MINUTES(sum(hold_time)/sum(if(hold_time,1,0))),'00:00:00') as avg_hold_held,sum(if((unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time)),1,0)) as calls_queued,HOUR_MINUTES(sum(if(q_leave_time,unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time),0))) as tot_queue_time,ifnull(HOUR_MINUTES(sum(if(q_leave_time,unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time),0))/sum(if((unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time)),1,0))),'00:00:00') as avg_queue_time,ifnull(HOUR_MINUTES(sum(if(q_leave_time,unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time),0))/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'00:00:00') as avg_speed_ans,MAX(unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time)), sum(if(wrapup_time,1,0)) as wrap_count, HOUR_MINUTES(sum(if(wrapup_time > 86400 or wrapup_time <0,0,wrapup_time))) as Total_Wrapup_Time,ifnull(HOUR_MINUTES(sum(if(wrapup_time > 86400 or wrapup_time <0,0,wrapup_time))/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'00:00:00') as avg_wrap_time,ifnull(HOUR_MINUTES(sum(wait_time)/sum(if(agent_id!=0,1,0))),'00:00:00') as wait_time, format(sum(call_charges),2)",
                ),

                "header"        => array(

                    "INBOUND"   => "Campaign Name,DID Number,Calls Offered,Calls Answd,Transferred,% Answd ,Calls Abandon,% Abndnd,Call Handling Time,Avg Call Handling Time,Actual Talk Time,Talk Time,Ring Time,Average Talk Time,Calls Held,Hold Time,Avg Hold Time of Held,Avg Hold Time of Answd,Calls Queued,Queued Time,Average Queue Time,Average Speed of Answer,Max Delay in Secs,Wrap Up Count,Wrapup Time,Avg Wrap Time,Average Wait Time",

                    "OUTBOUND"  => "Campaign Name,Dialer Type, Channel,Calls Initiated,Calls Failed, %Failed, Calls Offered to ACD, %Offered, Calls Abndnd, % Abndnd on Initiated,% Abndnd on Offered,Calls Success,Transferred,% Success on Initiated,%Success on Offered,Call Handling Time, Avg Call Handling Time,Actual Talk Time, Talk Time,Ring Time, Avg Talk Time, Calls Held,Hold Time,Avg Hold Time of Held,Avg Hold Time of Answd,Calls Queued,Queued Time,Average Queue Time,Average Speed of Answer,Max Delay in Secs,Wrap Up Count,Wrapup Time,Avg Wrap Time,Average Wait Time",

                    "ALL"       => "Campaign Name,Dialer Type,Campaign Type,Channel,Total Calls Initiated,Total Calls Offered,% Offered,Total Calls Answd,Transferred,% Answd on Initiated,%Answd on Offered,Disposition Set,Disposition Not Set,Abandon,% Abndnd on Initiated,% Abndnd on Offered,Failed,Total call Handling Time, Total Actual Talk Time,Total Talk Time,Total Ring Time,Average Talk Time,Average Call Handling Time,Calls Held,Total Hold Time,Avg Hold Time of Answd,Avg Hold Time of Held,Calls Queued,Total Queue Time,Average Queue Time,Average Speed of Answer,Max Queue Time,Wrap Count,Total Wrapup Time,Avg Wrap Time,Average Wait Time,Total Cost",
                ),

                "where"        => " where (call_status_disposition!='supervised_transfer' or isnull(call_status_disposition)) ",
                "order by"     => " ",
                "group by"     => array(
                    "INBOUND"  => " group by dialer_type,campaign_type,campaign_id,did_num",
                    "OUTBOUND" => " group by dialer_type,campaign_type,campaign_id",
                    "ALL"      => " group by dialer_type,campaign_type,campaign_id "
                ),
                'table_name'   => ' from $this->table_name a',
            ),

            "campaign_time_of_the_day_report"  => array(
                "query"      => "select date(call_start_date_time) as date,CONCAT(LPAD(FLOOR(hour(call_start_date_time)/2)*2, 2, '0'), '-',LPAD((FLOOR(hour(call_start_date_time)/2)+1)*2, 2, '0' )) as range1 , campaign_name,dialer_type,campaign_type,campaign_channel,count(campaign_id) as initiated_calls,sum(if(dialer_inserted_field = 0,1,0)) as Total_offered,format((sum(if(dialer_inserted_field = 0,1,0))/count(campaign_id) * 100),2) as percent_offered,sum(if((call_status_disposition='answered' or call_status_disposition='transfer') and dialer_inserted_field=0,1,0)) as Total_answd,sum(if((call_status_disposition='transfer') and dialer_inserted_field=0,1,0)) as Total_trnsfrd,format((sum(if((call_status_disposition='answered' or call_status_disposition='transfer') and dialer_inserted_field=0,1,0))/count(campaign_id) * 100),2) as percent_answd_initiated,format((sum(if((call_status_disposition='answered' or call_status_disposition='transfer') and dialer_inserted_field=0,1,0))/sum(if(dialer_inserted_field = 0,1,0)) * 100),2) as percent_answd_offered,sum(if(agent_id!='' && cust_disposition <> 'None' && cust_disposition<>'',1,0)) as disp_set,sum(if(agent_id!='' && (cust_disposition = 'None' || cust_disposition=''),1,0)) as disp_not_set,sum(if(call_status_disposition in ('abandon'),1,0)) as abandon,format((sum(if(call_status_disposition in ('abandon'),1,0))/count(campaign_id) * 100),2) as per_abndn_init,format((sum(if(call_status_disposition in ('abandon'),1,0))/sum(if(dialer_inserted_field = 0,1,0)) * 100),2) as per_abndn_off ,sum(if(dialer_inserted_field=1,1,0)) as failed,format((sum(if(dialer_inserted_field=1,1,0))/sum(if(dialer_inserted_field = 0,1,0)) * 100),2) as per_failed, HOUR_MINUTES(sum(call_duration + wrapup_time)) as tot_call_handling_time,HOUR_MINUTES(sum(call_duration)) as tot_talk_time, ifnull(HOUR_MINUTES((sum(call_duration))/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'0') as avg_talk_time,ifnull(HOUR_MINUTES(sum(call_duration + wrapup_time)/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'00:00:00') as avg_call_handling_time,sum(if(hold_time,1,0)) as Total_Hold_Count, HOUR_MINUTES(sum(hold_time)) as total_hold_time,ifnull(HOUR_MINUTES(sum(hold_time)/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'0') as avg_hold_answd,ifnull(HOUR_MINUTES(sum(hold_time)/sum(if(hold_time,1,0))),'00:00:00') as avg_hold_held,sum(if((unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time)),1,0)) as calls_queued,HOUR_MINUTES(sum(if(q_leave_time,unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time),0))) as tot_queue_time,ifnull(HOUR_MINUTES(sum(if(q_leave_time,unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time),0))/sum(if((unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time)),1,0))),'00:00:00') as avg_queue_time,ifnull(HOUR_MINUTES(sum(if(q_leave_time,unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time),0))/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'00:00:00') as avg_speed_ans,MAX(unix_timestamp(q_leave_time)- unix_timestamp(q_enter_time)), sum(if(wrapup_time,1,0)) as wrap_count, HOUR_MINUTES(sum(if(wrapup_time > 86400 or wrapup_time <0,0,wrapup_time))) as Total_Wrapup_Time,ifnull(HOUR_MINUTES(sum(if(wrapup_time > 86400 or wrapup_time <0,0,wrapup_time))/sum(if(agent_id<>0 and call_status_disposition!='noans' and dialer_inserted_field=0,1,0))),'00:00:00') as avg_wrap_time,ifnull(HOUR_MINUTES(sum(wait_time)/sum(if(agent_id!=0,1,0))),'00:00:00'), format(sum(call_charges),2) ",
                "order by"   => "",
                "table_name" => ' from $this->table_name',
            ),
            "agent_break_report"                              => array(
                "query"      => "agent_break_query",
                "header"     => 'agent_break_header',
                "where"      => "",
                "order by"   => " order by agent_name,call_start_date_time",
                "group by"   => "",
                "table_name" => "",
            ),
            "magic_call_report"  => array(
                //"query" => "select department_name,agent_ph_no,cust_ph_no,ifnull(HOUR_MINUTES(unix_timestamp(call_end_date_time) - unix_timestamp(ringstart_time)),'00:00:00'),HOUR_MINUTES(duration),call_status_disposition_agent,call_status_disposition_cust,call_remarks,call_start_date_time,call_end_date_time,monitor_filename,monitor_file_path,disconnected_by,session_id,client_id,channel_type,call_channel,CustUniqueId,location_id,location_name,ReportUid,callcategory,language,'yash')",
                // "query" => "select department_name,agent_ph_no,cust_ph_no,ifnull(HOUR_MINUTES(unix_timestamp(call_end_date_time) - unix_timestamp(ringstart_time)),'00:00:00'),HOUR_MINUTES(duration),call_status_disposition_agent,call_status_disposition_cust,call_remarks,call_start_date_time,call_end_date_time,monitor_filename,monitor_file_path,disconnected_by,session_id,client_id,channel_type,call_channel,CustUniqueId,location_id,location_name,ReportUid,callcategory,language,CONCAT('" . $this->baseURL . "/apps/voiceFileDownloadApi.php?data=',REPLACE(TO_BASE64(JSON_OBJECT('report_id', report_id, 'year', '" . $this->year . "','month', '" . $this->month . "', 'feature', 'MAGIC')), '\n', '')) as download_voice_file_link",
                "query" => "SELECT department_name,agent_ph_no,cust_ph_no,IFNULL(HOUR_MINUTES(UNIX_TIMESTAMP(call_end_date_time) - UNIX_TIMESTAMP(ringstart_time)), '00:00:00') AS call_duration,HOUR_MINUTES(duration),call_status_disposition_agent,call_status_disposition_cust,call_remarks,call_start_date_time,call_end_date_time,monitor_filename,new_monitor_filename,monitor_file_path,disconnected_by,session_id,client_id,channel_type,call_channel,CustUniqueId,location_id,location_name,ReportUid,callcategory,language,CASE WHEN (monitor_filename IS NULL OR monitor_filename = '') THEN '' ELSE CONCAT('" . $this->baseURL . "/apps/voiceFileDownloadApi.php?data=', REPLACE(TO_BASE64(JSON_OBJECT('report_id', report_id, 'year', '" . $this->year . "','month', '" . $this->month . "','feature', 'MAGIC')), '\n', '')) END AS download_voice_file_link",

                "header" => "Department Name,Agent phone no,Customer Phone no,Agent Duration,Customer Duration,Call Status Disposition Agent,Call Status Disposition Customer,Call Remarks,Call Start Date Time,Call End Date Time,Monitor Filename,Monitor File Path,Disconnected By,Session id,Client id,Channel Type,Call Channel,Customer UniqueId,Location id,Location Name,Report Uid,Call Category,Language,Download Voice File Link",
                "table_name"    => ' from $this->table_name as a',
                "where"      => " where 1 ",
                "order by"  => ' order by call_start_date_time desc',
            ),
            "detail_call_report" => array(
                "query"      => "select ifnull(agent_name,'') as agent_name,call_duration,ifnull(agent_id,'') as agent_id,ifnull(agent_identity,'') as agent_identity,ifnull(campaign_name,'') as campaign_name,ifnull(list_name,'') as list_name,ifnull(cust_name,'') as cust_name,ifnull(cust_ph_no,'') as custphno,ifnull(if(q_leave_time,(unix_timestamp(q_leave_time)-unix_timestamp(q_enter_time)),0),''),ifnull(call_start_date_time,'0000-00-00 00:00:00'),ifnull(if(dialer_type!='AUTODIAL',sec_to_time(call_duration),'00:00:00'),'00:00:00'),ifnull(dialer_type,''),ifnull(campaign_type,''),ifnull(call_status_disposition,'') as call_status_disposition,ifnull(if(redial_flag=0,'NO','YES'),'0'),ifnull(monitor_file_path,''),ifnull(monitor_filename,''),ifnull(new_monitor_filename,''),ifnull(cust_disposition,'') as cust_disposition,ifnull(cust_category,'') as cust_category,ifnull(transfer_from,'') as transfer_from,ifnull(transfer_status,'') as transfer_status,ifnull(replace(session_id,'.','_'),'0.0000000000'),ifnull(call_remarks,'') as call_remarks,ifnull(sec_to_time(wrapup_time),'00:00:00'),ifnull(zap_channel,''),ifnull(if(next_call_time=0,'0000-00-00 00:00:00',from_unixtime(next_call_time)),'0000-00-00 00:00:00'),ifnull(skills,''),ifnull(did_num,'') as did_num,ifnull(if(ph_type=102,'Phone2',if(ph_type=103,'Phone3',if(ph_type=104,'Phone4',if(ph_type=105,'Phone5',if(ph_type=106,'Phone6',if(ph_type=107,'Phone7',if(ph_type=108,'Phone8',if(ph_type=109,'Phone9',if(ph_type=101,'Phone1',''))))))))),'') as phone_type,ifnull(sec_to_time(wait_time),'00:00:00') as wait_time,ifnull(sec_to_time(hold_time),'00:00:00') as hold_time,ifnull(ivrs_path,'') as ivrs_path,ifnull(if(disconnected_by=1,'C',if(disconnected_by=2,'A',if(disconnected_by=3,'QT',if(disconnected_by=4,'Dtmf_Exit','Failed')))),''),ifnull(hold_num_time,'0'),ifnull(if(setme_free_parsed=1,'Agent',if(setme_free_parsed=2,'AutoWrapped','')),''),ifnull(if(ringing_flag=0,'NO','YES'),''),ifnull(lead_attempt_count,'0'),ifnull(phone_attempt_count,'0'),ifnull(dialer_remarks,''),ifnull(sec_to_time(if((dialer_type='PREVIEW' || czreversedial='1') and ringend_time!='0000-00-00 00:00:00',(unix_timestamp(ringend_time)-unix_timestamp(ringstart_time)),0)),'00:00:00') as ringduration,ifnull(if(dialer_type='PREVIEW' || czreversedial='1',ringstart_time,'0000-00-00 00:00:00'),'0000-00-00 00:00:00') as ringstart_time,ifnull(if(dialer_type='PREVIEW' || czreversedial='1',ringend_time,'0000-00-00 00:00:00'),'0000-00-00 00:00:00') as ringend_time,ifnull(sec_to_time(if(dialer_type='PREVIEW' || czreversedial='1',if(ringend_time!='0000-00-00 00:00:00',(if((call_duration-((unix_timestamp(ringend_time)-unix_timestamp(ringstart_time))+hold_time))>0,(call_duration-((unix_timestamp(ringend_time)-unix_timestamp(ringstart_time))+hold_time)),0)),(call_duration - hold_time)),(call_duration - hold_time))),'00:00:00'),ifnull(CustUniqueId,''),ifnull(if(ringing_flag=1,'Contacts',if(ringing_flag=0,'Non Contacts',if(ringing_flag=2,'Right Party Contacts',''))),'') as call_stat,ifnull(caller_id,'') as caller_id,ifnull(causecode,''),ifnull(agent_ringstart,'0000-00-00 00:00:00'),ifnull(agent_ringend,'0000-00-00 00:00:00'),ifnull(sec_to_time(if((unix_timestamp(agent_ringend)-unix_timestamp(agent_ringstart))>0,(unix_timestamp(agent_ringend)-unix_timestamp(agent_ringstart)),0)),'00:00:00') as agentringduration,ifnull(customer_sentiment_name,'') as customer_sentiment_name,ifnull(cust_rp1,'') as cust_rp1,ifnull(cust_rp2,'') as cust_rp2,ifnull(cust_rp3,'') as cust_rp3,ifnull(cust_rp4,'') as cust_rp4,ifnull(provider_name,'') as provider_name,ifnull(location_id,'') as location_id,ifnull(location_name,'') as location_name,ifnull(lead_id,'') as lead_id,ifnull(replace(ReportUid,'.','_'),'') as ReportUid,ifnull(sec_to_time(if(campaign_type='INBOUND',(ivr_end_time-ivr_start_time),0)),'00:00:00') as ivr_duration,ifnull(abandon_sess_id,''),ifnull(sec_to_time(if(dialer_type = 'PREVIEW' and campaign_type = 'OUTBOUND' and callpicked = '1',if(ringend_time!='0000-00-00 00:00:00',if(unix_timestamp(call_end_date_time) - unix_timestamp(ringend_time) < 0,0,unix_timestamp(call_end_date_time) - unix_timestamp(ringend_time)),if(unix_timestamp(call_end_date_time) - entrytime < 0,0,unix_timestamp(call_end_date_time) - entrytime)),if(dialer_type = 'PREVIEW' and campaign_type = 'OUTBOUND' and callpicked = 0,0,if(dialer_type != 'PREVIEW' and campaign_type='OUTBOUND' and callpicked = '1' and czreversedial='1',if(unix_timestamp(call_end_date_time) - unix_timestamp(ringend_time) < 0,0,unix_timestamp(call_end_date_time) - unix_timestamp(ringend_time)),if(dialer_type != 'PREVIEW' and campaign_type='OUTBOUND' and callpicked = 0,0,if(unix_timestamp(call_end_date_time) - entrytime < 0,0,if(call_status_disposition = 'abandon',0,unix_timestamp(call_end_date_time) - entrytime))))))),'00:00:00') as customer_duration,ifnull(if(campaign_type = 'OUTBOUND' and callpicked = '1','YES',if(campaign_type = 'INBOUND','YES','NO')),'') as customer_answered,ifnull(agent_ext,''),ifnull(callcategory,''),ifnull(language,''),ifnull(team_name,''),if(park_start_time=0,'0000-00-00 00:00:00',from_unixtime(park_start_time)),if(park_end_time=0,'0000-00-00 00:00:00',from_unixtime(park_end_time)),ifnull(s2c_ph_no,''),ifnull(origin_ip,'')",
                "where"      => " (call_status_disposition IS NULL OR call_status_disposition != 'supervised_transfer')  ",
                "order by"   => "",
                "header"     => "Agent Name,Call Duration,Agent ID,Agent Identity,Campaign Name,List Name,Customer Name,Customer Ph No,Queue Time,Date Time,Agent Duration,Call Type,Orientation Type,Call Status,Redial Flag,Monitor File Path,Monitor File Name,Custom Monitor File Name,Cust Disposition,Cust Category,Transferred From,Transferred To,Session ID,Call Remarks,Wrapup Time,Channel,Next Call Time,Skills,DID Number,Phone Type,Wait Time,Hold Time,IVRS Path,Disconnected By,Hold Num Times,Wrapped By,Ringing,Total Attempt,Total Phone Attempt,Dialer Action,Ring Duration,Ring Start Time,Ring End Time,Actual Talk Time,Unique ID,Final Call Status,Caller Id,Failure Reason,Agent Ring Start,Agent Ring End,Agent Ring Duration,Customer Sentiment,Cust Field1,Cust Field2,Cust Field3,Cust Field4,Provider Name,LocationId,LocationName,Lead Id,ReportUid,IVR_Duration,Abandon Session ID,Customer Duration,Customer Answered,Agent Ext,Call Category,Language,Team Name,Park Start Time,Park End Time,S2C Number,Origin IP",
                "table_name" => ' from $this->table_name as a FORCE INDEX (campaign_id) '
            ),
            "agent_summary_report" => array(
                'query'    => 'czentrix_agent_summary_report',
                'header'   => 'Agent Name,Agent ID,Agent Identity,Campaign Name,Total Calls,Calls Answered in Preview,Calls Answered in Progressive,Calls Answered in Predictive,Disposition Set,Disposition Not Set,Calls Held,Talk Time,Avg Talk Time,Preview Talk Time,Actual Talk Time,Ring Time,Avg Ring Time,Hold Time,Avg Hold Time,Call Handled Time,Avg Call Handled Time,Wrap Count,Wrap Time,Avg Wrapup Time,Total Login Time,Idle Time,Aux Time,Preview Aux Time,Ready Time,Staff Time,Conf Duration,Total Preview Time,Preview Idle Time',
                'group by' => ' group by agent_id and',
            ),
            //Gaurav jain edit 

            "ivr_detail_call_report" => array(
                "query"      => "select ivr_node_name,ivrs_path,did_num,a.cust_ph_no, ivrs_leaf_node,link_date_time, unlink_date_time,ifnull(CampaignTransfer,'') as CampaignTransfer,ifnull(CampaignEnded,'') as CampaignEnded,session_id,duration,zap_channel,skills,language,callcategory,ifnull(replace(ReportUid,'.','_'),''),CustUniqueId",
                "table_name" => " from $this->table_name as a",
                "where"      => " WHERE 1 ",
                "order by"   => "order by entrytime",
                "header"     => "IVR Node Name,IVRS Path,DID Path,Customer Phone Number,Leaf Node,Link Time,Unlink Time,Transfer To,CampaignEnded,Session ID,Duration,Channel,Skills,Language,Call Category,ReportUid,CustUniqueId"
            ),
        );
    }

    public function setTableName() {}
}
?>
